// NLP Service - Main Interface for Voice Command Processing
// Integrates hybrid NLP processor with existing voice assistant

import { HybridNLPProcessor } from './HybridNLPProcessor';
import { NLPConfig, BusinessContext, BusinessIntent, VoiceIntent, NLPResult, NLPServiceConfig } from './types';

export class NLPService {
  private static instance: NLPService;
  private processor: HybridNLPProcessor;
  private isDebugMode: boolean = false;

  private constructor() {
    // Default configuration - can be overridden
    const defaultConfig: NLPConfig = {
      primaryProvider: 'local', // Start with local, can upgrade to AI
      fallbackProvider: 'openai',
      localThreshold: 0.7, // Use local if confidence >= 70%
      aiThreshold: 0.6, // Accept AI results if confidence >= 60%
      monthlyBudget: 1000, // Max 1000 AI API calls per month
      enableDebug: process.env.NODE_ENV === 'development'
    };

    this.processor = new HybridNLPProcessor(defaultConfig);
    this.isDebugMode = defaultConfig.enableDebug;
  }

  static getInstance(): NLPService {
    if (!NLPService.instance) {
      NLPService.instance = new NLPService();
    }
    return NLPService.instance;
  }

  // Main method to process voice commands
  async processVoiceCommand(
    transcript: string, 
    businessContext?: BusinessContext,
    currentStage?: string
  ): Promise<NLPResult> {
    // Processing start time for performance tracking
    // eslint-disable-next-line no-console
    console.log('ЁЯЪА NLPService.processVoiceCommand called with:', transcript);
    
    try {
      // Process the command using hybrid NLP
      const result = await this.processor.processVoiceCommand(transcript, businessContext);
      
      // eslint-disable-next-line no-console
      console.log('ЁЯФз HybridNLPProcessor result:', result);
      // eslint-disable-next-line no-console
      console.log('ЁЯФз result.intent:', result.intent);
      
      // Generate user-friendly response
      const response = this.generateResponse(result.intent, businessContext, currentStage);
      
      // Debug logging
      if (this.isDebugMode) {
        // NLP Processing completed successfully
      }

      return {
        intent: result.intent.intent as BusinessIntent,
        response,
        confidence: result.intent.confidence,
        processingMethod: result.processingMethod,
        cost: result.cost,
        payload: result.intent.payload,
        originalText: result.intent.originalText,
        language: result.intent.language
      };

    } catch (error) {
      // NLP Service Error occurred
      return {
        intent: 'UNKNOWN_INTENT',
        response: 'Sorry, I couldn\'t understand that command. Please try again.',
        confidence: 0,
        processingMethod: 'error',
        cost: 0,
        payload: undefined,
        originalText: transcript,
        language: 'en'
      };
    }
  }

  private generateResponse(intent: VoiceIntent, businessContext?: BusinessContext, currentStage?: string): string {
    const intentType = intent.intent;
    const language = intent.language || 'en';

    // Business intelligence responses with real data
    if (intentType === 'SHOW_PRIORITIES' && businessContext) {
      if (language === 'hi') {
        return `рдЖрдЬ рдХреЗ рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдПрдВ: ${businessContext.hotLeads} рд╣реЙрдЯ рд▓реАрдбреНрд╕, ${businessContext.overduePayments} рдмрдХрд╛рдпрд╛ рдкреЗрдореЗрдВрдЯреНрд╕, ${businessContext.readyToShip} рд╢рд┐рдкрдореЗрдВрдЯ рддреИрдпрд╛рд░`;
      }
      if (language === 'gu') {
        return `ркЖркЬркирлА рккрлНрк░рк╛ркеркорк┐ркХркдрк╛ркУ: ${businessContext.hotLeads} рк╣рлЙркЯ рк▓рлАркбрлНрк╕, ${businessContext.overduePayments} ркмрк╛ркХрлА рккрлЗркорлЗркирлНркЯрлНрк╕, ${businessContext.readyToShip} рк╢рк┐рккркорлЗркирлНркЯ ркдрлИркпрк╛рк░`;
      }
      return `Today's priorities: ${businessContext.hotLeads} hot leads need calls, ${businessContext.overduePayments} overdue payments, ${businessContext.readyToShip} orders ready to ship`;
    }

    // Navigation responses by language
    const responses = {
      'OPEN_LEADS': {
        'en': 'Opening Lead Management',
        'hi': 'рд▓реАрдб рдореИрдиреЗрдЬрдореЗрдВрдЯ рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ',
        'gu': 'рк▓рлАркб ркорлЗркирлЗркЬркорлЗркирлНркЯ ркЦрлЛрк▓рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'OPEN_PAYMENTS': {
        'en': 'Opening Payment Management', 
        'hi': 'рдкреЗрдореЗрдВрдЯ рдореИрдиреЗрдЬрдореЗрдВрдЯ рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ',
        'gu': 'рккрлЗркорлЗркирлНркЯ ркорлЗркирлЗркЬркорлЗркирлНркЯ ркЦрлЛрк▓рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'OPEN_CUSTOMERS': {
        'en': 'Opening Customer Management',
        'hi': 'рдЧреНрд░рд╛рд╣рдХ рдореИрдиреЗрдЬрдореЗрдВрдЯ рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ', 
        'gu': 'ркХрк╕рлНркЯркорк░ ркорлЗркирлЗркЬркорлЗркирлНркЯ ркЦрлЛрк▓рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'OPEN_INVENTORY': {
        'en': 'Opening Inventory Management',
        'hi': 'рдЗрдиреНрд╡реЗрдВрдЯрд░реА рдореИрдиреЗрдЬрдореЗрдВрдЯ рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ',
        'gu': 'ркЗркирлНрк╡рлЗркирлНркЯрк░рлА ркорлЗркирлЗркЬркорлЗркирлНркЯ ркЦрлЛрк▓рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'OPEN_ORDERS': {
        'en': 'Opening Order Management',
        'hi': 'рдСрд░реНрдбрд░ рдореИрдиреЗрдЬрдореЗрдВрдЯ рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ',
        'gu': 'ркУрк░рлНркбрк░ ркорлЗркирлЗркЬркорлЗркирлНркЯ ркЦрлЛрк▓рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'OPEN_ANALYTICS': {
        'en': 'Opening Business Analytics',
        'hi': 'рдмрд┐рдЬрдиреЗрд╕ рдПрдирд╛рд▓рд┐рдЯрд┐рдХреНрд╕ рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ',
        'gu': 'ркмрк┐ркЭркирлЗрк╕ ркПркирк╛рк▓рк┐ркЯрк┐ркХрлНрк╕ ркЦрлЛрк▓рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'OPEN_PRODUCTION': {
        'en': 'Opening Production Management',
        'hi': 'рдкреНрд░реЛрдбрдХреНрд╢рди рдореИрдиреЗрдЬрдореЗрдВрдЯ рдЦреЛрд▓ рд░рд╣реЗ рд╣реИрдВ',
        'gu': 'рккрлНрк░рлЛркбркХрлНрк╢рки ркорлЗркирлЗркЬркорлЗркирлНркЯ ркЦрлЛрк▓рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'SHOW_BUSINESS_OVERVIEW': {
        'en': 'Showing Business Overview',
        'hi': 'рдмрд┐рдЬрдиреЗрд╕ рдУрд╡рд░рд╡реНрдпреВ рджрд┐рдЦрд╛ рд░рд╣реЗ рд╣реИрдВ',
        'gu': 'ркмрк┐ркЭркирлЗрк╕ ркУрк╡рк░рк╡рлНркпрлБ ркмркдрк╛рк╡рлА рк░рк╣рлНркпрк╛ ркЫрлАркП'
      },
      'HELP_COMMAND': {
        'en': 'Available commands: Show leads, Open payments, Customer list, Inventory check, Order status, Business analytics',
        'hi': 'рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдбреНрд╕: рд▓реАрдбреНрд╕ рджрд┐рдЦрд╛рдПрдВ, рдкреЗрдореЗрдВрдЯреНрд╕ рдЦреЛрд▓реЗрдВ, рдЧреНрд░рд╛рд╣рдХ рд╕реВрдЪреА, рд╕реНрдЯреЙрдХ рдЪреЗрдХ, рдСрд░реНрдбрд░ рд╕реНрдЯреЗрдЯрд╕, рдмрд┐рдЬрдиреЗрд╕ рдПрдирд╛рд▓рд┐рдЯрд┐рдХреНрд╕',
        'gu': 'ркЙрккрк▓ркмрлНркз ркХркорк╛ркирлНркбрлНрк╕: рк▓рлАркбрлНрк╕ ркмркдрк╛рк╡рлЛ, рккрлЗркорлЗркирлНркЯрлНрк╕ ркЦрлЛрк▓рлЛ, ркХрк╕рлНркЯркорк░ рк▓рк┐рк╕рлНркЯ, рк╕рлНркЯрлЛркХ ркЪрлЗркХ, ркУрк░рлНркбрк░ рк╕рлНркЯрлЗркЯрк╕, ркмрк┐ркЭркирлЗрк╕ ркПркирк╛рк▓рк┐ркЯрк┐ркХрлНрк╕'
      },
      'UNKNOWN_INTENT': {
        'en': this.getContextualSuggestions(currentStage || 'dashboard', 'en'),
        'hi': this.getContextualSuggestions(currentStage || 'dashboard', 'hi'), 
        'gu': this.getContextualSuggestions(currentStage || 'dashboard', 'gu')
      }
    };

    const intentResponses = responses[intentType as keyof typeof responses];
    if (intentResponses) {
      const languageResponse = intentResponses[language as keyof typeof intentResponses] || intentResponses['en'];
      return languageResponse || 'Processing your request...';
    }
    return 'Processing your request...';
  }

  private getContextualSuggestions(stage: string, language: 'en' | 'hi' | 'gu'): string {
    const suggestions = {
      'dashboard': {
        'en': "I didn't catch that. Try: 'Show business overview', 'Search for company name', or 'Find pending orders'",
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ: 'рдмрд┐рдЬрдиреЗрд╕ рдУрд╡рд░рд╡реНрдпреВ рджрд┐рдЦрд╛рдПрдВ', 'рдХрдВрдкрдиреА рдирд╛рдо рдЦреЛрдЬреЗрдВ', рдпрд╛ 'pending orders рдвреВрдВрдвреЗрдВ'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВред рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ: 'ркмрк┐ркЭркирлЗрк╕ ркУрк╡рк░рк╡рлНркпрлБ ркмркдрк╛рк╡рлЛ', 'ркХркВрккркирлА ркирк╛рко рк╢рлЛркзрлЛ', ркЕркерк╡рк╛ 'рккрлЗркирлНркбрк┐ркВркЧ ркУрк░рлНркбрк░рлНрк╕ рк╢рлЛркзрлЛ'"
      },
      'leads': {
        'en': "I didn't catch that. On this page you can say: 'Show hot leads', 'Search for lead', or 'Find prospects'",
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдЗрд╕ page рдкрд░ рдЖрдк рдХрд╣ рд╕рдХрддреЗ рд╣реИрдВ: 'рд╣реЙрдЯ рд▓реАрдбреНрд╕ рджрд┐рдЦрд╛рдПрдВ', 'рд▓реАрдб рдЦреЛрдЬреЗрдВ', рдпрд╛ 'prospects рдвреВрдВрдвреЗрдВ'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВ. ркЖ рккрлЗркЬ рккрк░ ркдркорлЗ ркХрк╣рлА рк╢ркХрлЛ: 'рк╣рлЙркЯ рк▓рлАркбрлНрк╕ ркмркдрк╛рк╡рлЛ', 'рк▓рлАркб рк╢рлЛркзрлЛ', ркЕркерк╡рк╛ 'рккрлНрк░рлЛрк╕рлНрккрлЗркХрлНркЯрлНрк╕ рк╢рлЛркзрлЛ'"
      },
      'payments': {
        'en': "I didn't catch that. Try: 'Outstanding payments', 'Record payment', or 'Payment status'",
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ: 'рдмрдХрд╛рдпрд╛ payments', 'payment record рдХрд░реЗрдВ', рдпрд╛ 'payment status'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВред рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ: 'ркмрк╛ркХрлА рккрлЗркорлЗркирлНркЯрлНрк╕', 'рккрлЗркорлЗркирлНркЯ рк░рлЗркХрлЙрк░рлНркб ркХрк░рлЛ', ркЕркерк╡рк╛ 'рккрлЗркорлЗркирлНркЯ рк╕рлНркЯрлЗркЯрк╕'"
      },
      'customers': {
        'en': "I didn't catch that. Try: 'Search for customer', 'Find VIP clients', or 'Customer profile'",
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ: 'customer рдЦреЛрдЬреЗрдВ', 'VIP clients рдвреВрдВрдвреЗрдВ', рдпрд╛ 'customer profile'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВред рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ: 'ркХрк╕рлНркЯркорк░ рк╢рлЛркзрлЛ', 'VIP ркХрлНрк▓рк╛ркЗркирлНркЯрлНрк╕ рк╢рлЛркзрлЛ', ркЕркерк╡рк╛ 'ркХрк╕рлНркЯркорк░ рккрлНрк░рлЛрклрк╛ркЗрк▓'"
      },
      'inventory': {
        'en': "I didn't catch that. Try: 'Stock check', 'Material order', or 'Stock status'", 
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ: 'stock check', 'material order', рдпрд╛ 'stock status'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВред рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ: 'рк╕рлНркЯрлЛркХ ркЪрлЗркХ', 'ркоркЯрлАрк░рк┐ркпрк▓ ркУрк░рлНркбрк░', ркЕркерк╡рк╛ 'рк╕рлНркЯрлЛркХ рк╕рлНркЯрлЗркЯрк╕'"
      },
      'quotes': {
        'en': "I didn't catch that. Try: 'Create quote', 'Show pending quotes', or 'Quote approval status'",
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ: 'quote рдмрдирд╛рдПрдВ', 'pending quotes рджрд┐рдЦрд╛рдПрдВ', рдпрд╛ 'quote approval status'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВ. рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ: 'ркХрлНрк╡рлЛркЯ ркмркирк╛рк╡рлЛ', 'рккрлЗркирлНркбрк┐ркВркЧ ркХрлНрк╡рлЛркЯрлНрк╕ ркмркдрк╛рк╡рлЛ', ркЕркерк╡рк╛ 'ркХрлНрк╡рлЛркЯ ркПрккрлНрк░рлВрк╡рк▓ рк╕рлНркЯрлЗркЯрк╕'"
      },
      'production': {
        'en': "I didn't catch that. Try: 'Production status', 'Start production', or 'Quality check'",
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ: 'production status', 'production рд╢реБрд░реВ рдХрд░реЗрдВ', рдпрд╛ 'quality check'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВ. рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ: 'рккрлНрк░рлЛркбркХрлНрк╢рки рк╕рлНркЯрлЗркЯрк╕', 'рккрлНрк░рлЛркбркХрлНрк╢рки рк╢рк░рлВ ркХрк░рлЛ', ркЕркерк╡рк╛ 'ркХрлНрк╡рлЛрк▓рк┐ркЯрлА ркЪрлЗркХ'"
      },
      'analytics': {
        'en': "I didn't catch that. Try: 'Business performance', 'Monthly sales', or 'Show KPIs'",
        'hi': "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ: 'business performance', 'monthly sales', рдпрд╛ 'KPIs рджрд┐рдЦрд╛рдПрдВ'",
        'gu': "ркоркирлЗ рк╕ркоркЬрк╛ркпрлБркВ ркирк╣рлАркВ. рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ: 'ркмрк┐ркЭркирлЗрк╕ рккрк░рлНрклрлЛрк░рлНркоркирлНрк╕', 'ркорк╛рк╕рк┐ркХ рк╕рлЗрк▓рлНрк╕', ркЕркерк╡рк╛ 'KPIs ркмркдрк╛рк╡рлЛ'"
      }
    };
    
    return suggestions[stage as keyof typeof suggestions]?.[language] || suggestions.dashboard[language];
  }

  // Configuration methods
  enableAI(provider: 'openai' | 'google', apiKey?: string): void {
    this.processor.updateConfig({
      primaryProvider: provider,
      fallbackProvider: 'local'
    });
    
    if (this.isDebugMode) {
      // AI Provider enabled
    }
  }

  disableAI(): void {
    this.processor.updateConfig({
      primaryProvider: 'local',
      fallbackProvider: undefined
    });
    
    if (this.isDebugMode) {
      // AI disabled, using local processing only
    }
  }

  // Add custom business commands
  addCustomCommand(intent: string, keywords: string[], actions: string[]): void {
    this.processor.addLocalPattern(intent, keywords, actions);
    
    if (this.isDebugMode) {
      // Custom command added
    }
  }

  // Get usage statistics
  getUsageStats() {
    return this.processor.getUsageStats();
  }

  // Test NLP providers
  async testProviders() {
    return await this.processor.testAllProviders();
  }

  // Enable/disable debug mode
  setDebugMode(enabled: boolean): void {
    this.isDebugMode = enabled;
    this.processor.updateConfig({ enableDebug: enabled });
  }

  // Get current configuration
  getCurrentConfig(): NLPServiceConfig {
    return {
      usageStats: this.getUsageStats(),
      debugMode: this.isDebugMode
    };
  }
}

// Export singleton instance
export const nlpService = NLPService.getInstance();